package com.sacumen.controller;

import java.util.Arrays;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import com.sacumen.service.GitlabServiceI;

@RestController
@RequestMapping("/controller")
public class ApiController {
	
	 private static final Logger logger = LoggerFactory.getLogger(ApiController.class);

	@Autowired
	private GitlabServiceI service;

	@GetMapping("/get")
	public String getData() {
		return "Welcome";
	}

	/*
	 * @GetMapping("/getProjects") public List<Object> getProjects(){ String
	 * uri="https://gitlab.com/api/v4/projects"; RestTemplate restTemplate1=new
	 * RestTemplate(); Object[] objects = restTemplate1.getForObject(uri,
	 * Object[].class); return Arrays.asList(objects); }
	 * 
	 * @GetMapping("/getUsers") public List<Object> getUsers(){ String
	 * uri="https://gitlab.com/api/v4/projects"; RestTemplate restTemplate1=new
	 * RestTemplate(); Object[] objects = restTemplate1.getForObject(uri,
	 * Object[].class); return Arrays.asList(objects); }
	 */

	@GetMapping("/users")
	public ResponseEntity<?> getusers() {
		 logger.info("this is a info message");
		 List<Object> users;
		 HttpEntity<String> entity;
		 try {
			 HttpHeaders headers = new HttpHeaders();
	            headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
	            headers.add("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36");
	             entity = new HttpEntity<String>("parameters", headers);
		      users = service.getUsers();
		 }
		 catch (Exception e) {
			 e.printStackTrace();
			 return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		 }
		 logger.info("Returned user succesffully");
		return new ResponseEntity<>(user, entity,HttpStatus.OK);
	}

	@GetMapping("/projects")
	public ResponseEntity<Object> getprojects() {
		List<Object> projects;
		try {
		 projects = service.getProjects();
		}
		catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		return new ResponseEntity<Object>(projects, HttpStatus.OK);
	}

	@GetMapping("/projects/{id}")
	public String geptprojects(@PathVariable int id) {
		String byId = service.getProjectById(id);
		return byId;
	}

}
